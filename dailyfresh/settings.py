"""
Django settings for dailyfresh project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# 把apps文件夹添加到导包路径
sys.path.insert(1, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'm)-i2x=@fgggqo&1n@6+lh!6cu)rijx#5ejjeh!%)$pi8o#^n2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'goods',
    'orders',
    'cart',
    'celery_tasks.celery.CeleryConfig'  # 添加celery应用
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'dailyfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dailyfresh',
        'HOST': 'localhost',  # MySQL数据库地址(主)
        'USER': 'root',
        'PORT': '3306',
        'PASSWORD': 'mysql',
    }
}
# 数据库主从的读写分离配置
# DATABASE_ROUTERS = ['utils.db_routers.MasterSlaveDBRouter']

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

# django自带用户系统，语法格式：应用.用户模型
AUTH_USER_MODEL = 'users.User'

# 指定静态文件存放的目录
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# 配置发送邮箱验证邮件发件人的信息
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # 导入邮件模块
EMAIL_HOST = 'smtp.163.com'  # 发邮件主机
EMAIL_PORT = 25  # 发邮件端口
EMAIL_HOST_USER = '18312913688@163.com'  # 授权的邮箱
EMAIL_HOST_PASSWORD = 'admin666'  # 邮箱授权时获得的密码，非注册登录密码
EMAIL_FROM = '天天生鲜<18312913688@163.com>'  # 发件人抬头

# 缓存， 配置django-redis
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.3.168:6379/5",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Session
# http://django-redis-chs.readthedocs.io/zh_CN/latest/#session-backend
# 设置session存储在redis中
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# 如果用户没有登入，会跳转到登入页面
LOGIN_URL = '/users/login'

# 配置django自定义的存储系统
DEFAULT_FILE_STORAGE = 'utils.fastdfs.storage.FastDFSStorage'

# fdfs默认配置
FDFS_CLIENT_CONF = os.path.join(BASE_DIR, './utils/fastdfs/client.conf')
FDFS_SERVER_IP = 'http://192.168.3.168:8888/'

# # 富文本编辑框的配置
# TINYMCE_DEFAULT_CONFIG = {
#   'theme': 'advanced',  # 丰富样式
#   'width': 600,
#   'height': 400,
# }
#
# # 支付宝接口地址
# ALIPAY_URL = 'https://openapi.alipaydev.com/gateway.do'
#
# # 搜集静态文件
# STATIC_ROOT = '/home/python/Desktop/static'
#
# # 配置搜索引擎后端
# HAYSTACK_CONNECTIONS = {
#   'default': {
#       # 使用whoosh引擎：提示，如果不需要使用jieba框架实现分词，就使用whoosh_backend
#       'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
#       # 索引文件路径
#       'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
#   }
# }
#
# # 当添加、修改、删除数据时，自动生成索引
# HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

"""CELERY配置"""
CELERY_ACCEPT_CONTENT = ['msgpack']
CELERY_TASK_SERIALIZER = 'msgpack'  # Use msgpack may be more speed than json.
CELERY_RESULT_SERIALIZER = 'msgpack'
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24
# Using rabbitmq as broker and redis as result backend is a popular combination.
CELERY_BROKER_URL = 'pyamqp://leslie:admin@192.168.3.168:5672/administrator'
CELERY_RESULT_BACKEND = 'redis://192.168.3.168:6379/4'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_ENABLE_UTC = True
CELERYD_MAX_TASKS_PER_CHILD = 5

