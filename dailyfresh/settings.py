"""
Django settings for dailyfresh project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys
import environ
from pathlib import Path

ROOT_DIR = Path(__file__).resolve(strict=True).parent.parent
# 把apps文件夹添加到导包路径
APP_DIR = ROOT_DIR / "apps"
sys.path.insert(1, os.path.join(APP_DIR))

env = environ.Env()
env.read_env(ROOT_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'm)-i2x=@fgggqo&1n@6+lh!6cu)rijx#5ejjeh!%)$pi8o#^n2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = (
    'simpleui',
    'collectfast',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.users',
    'apps.goods',
    'apps.orders',
    'apps.cart',
    'celery_tasks.celery.CeleryConfig',  # 添加celery应用
    'storages',
    'oauth2_provider',
)

MIDDLEWARE = (
    "django.middleware.security.SecurityMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'dailyfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(ROOT_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("DB_NAME"),
        "USER": env("DB_USER"),
        "PASSWORD": env("DB_PW"),
        "HOST": env("DB_HOST"),
        "PORT": env("DB_PORT"),
        "OPTIONS": {"options": f"-c search_path={env('DB_SCHEMA')}"},
        "CONN_MAX_AGE": 60,
    }
}
# 数据库主从的读写分离配置
# DATABASE_ROUTERS = ['utils.db_routers.MasterSlaveDBRouter']

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

# django自带用户系统，语法格式：应用.用户模型
AUTH_USER_MODEL = 'users.User'

# 指定静态文件存放的目录
STATICFILES_DIRS = [
    os.path.join(ROOT_DIR, 'static')
]

# 配置发送邮箱验证邮件发件人的信息
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # 导入邮件模块
EMAIL_HOST = 'smtp.163.com'  # 发邮件主机
EMAIL_PORT = 25  # 发邮件端口
EMAIL_HOST_USER = 'xxxx@xxxx.com'  # 授权的邮箱
EMAIL_HOST_PASSWORD = 'xxxxxxx'  # 邮箱授权时获得的密码，非注册登录密码
EMAIL_FROM = 'DailyFresh<xxxx@xxxx.co>'  # 发件人抬头

# 缓存， 配置django-redis
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env.str("REDIS_URL"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Session
# http://django-redis-chs.readthedocs.io/zh_CN/latest/#session-backend
# 设置session存储在redis中
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# 如果用户没有登入，会跳转到登入页面
LOGIN_URL = '/users/login'

# 配置django自定义的存储系统
# DEFAULT_FILE_STORAGE = 'utils.fastdfs.storage.FastDFSStorage'
# DEFAULT_FILE_STORAGE = 'utils.qiniu.QiNiuStorage'
# STATICFILES_STORAGE = 'utils.qiniu.QiNiuStorage'
#
# OSS_ACCESS_KEY = env.str("OSS_ACCESS_KEY")
# OSS_SECRET_KEY = env.str("OSS_SECRET_KEY")
# OSS_BUCKET_NAME = env.str("OSS_BUCKET_NAME")
# OSS_BASE_URL = env.str("OSS_BASE_URL")
# STATICFILES_STORAGE = "utils.storage.MinioStaticStorage"
COLLECTFAST_STRATEGY = "collectfast.strategies.boto3.Boto3Strategy"

# DEFAULT_FILE_STORAGE = "utils.storage.MinioMediaStorage"

AWS_S3_ACCESS_KEY_ID = env.str("AWS_S3_ACCESS_KEY_ID")
AWS_S3_SECRET_ACCESS_KEY = env.str("AWS_S3_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME")
AWS_S3_ENDPOINT_URL = env.str("AWS_S3_ENDPOINT_URL")
# AWS_SESSION_TOKEN
# AWS_SECURITY_TOKEN

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

MEDIA_ROOT = str(ROOT_DIR / "media")
MEDIA_URL = "/media/"

# fdfs默认配置
# FDFS_CLIENT_CONF = os.path.join(BASE_DIR, 'utils/fastdfs/client.conf')
# FDFS_SERVER_IP = 'http://127.0.0.1:8888/'

# # 富文本编辑框的配置
# TINYMCE_DEFAULT_CONFIG = {
#   'theme': 'advanced',  # 丰富样式
#   'width': 600,
#   'height': 400,
# }
#
# # 支付宝接口地址
# ALIPAY_URL = 'https://openapi.alipaydev.com/gateway.do'
#
# # 搜集静态文件
STATIC_ROOT = '/Users/leslie/workspace/FreshMallDemo/ssss'
#
# # 配置搜索引擎后端
# HAYSTACK_CONNECTIONS = {
#   'default': {
#       # 使用whoosh引擎：提示，如果不需要使用jieba框架实现分词，就使用whoosh_backend
#       'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
#       # 索引文件路径
#       'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
#   }
# }
#
# # 当添加、修改、删除数据时，自动生成索引
# HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

"""CELERY配置"""
CELERY_ACCEPT_CONTENT = ['msgpack']
CELERY_TASK_SERIALIZER = 'msgpack'  # Use msgpack may be more speed than json.
CELERY_RESULT_SERIALIZER = 'msgpack'
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24
# Using rabbitmq as broker and redis as result backend is a popular combination.
CELERY_BROKER_URL = 'pyamqp://leslie:admin@192.168.3.168:5672/administrator'
CELERY_RESULT_BACKEND = 'redis://192.168.3.168:6379/4'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_ENABLE_UTC = True
CELERYD_MAX_TASKS_PER_CHILD = 5
